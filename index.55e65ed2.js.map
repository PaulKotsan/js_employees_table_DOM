{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// JS+DOM, table variables\nvar tableOfWorkers = document.querySelector(\"table\");\nvar tableHeader = document.querySelector(\"table\");\nvar tableRows = Array.from(tableOfWorkers.querySelectorAll(\"tbody > tr\"));\n// Add form\nvar employeeForm = document.createElement(\"form\");\nemployeeForm.classList.add(\"new-employee-form\");\ndocument.body.appendChild(employeeForm);\n// Form labels and input\n// #region form_data\n// Add labels\n// NAME\nvar labelName = document.createElement(\"label\");\nlabelName.textContent = \"Name: \";\nvar nameInput = document.createElement(\"input\");\nnameInput.type = \"text\";\nnameInput.name = \"name\";\nnameInput.setAttribute(\"data-qa\", \"name\");\n// POSITION\nvar labelPosition = document.createElement(\"label\");\nlabelPosition.textContent = \"Position: \";\nvar positionInput = document.createElement(\"input\");\npositionInput.type = \"text\";\npositionInput.name = \"position\";\npositionInput.setAttribute(\"data-qa\", \"position\");\n// OFFICE\nvar labelOffice = document.createElement(\"label\");\nlabelOffice.textContent = \"Office: \";\nvar officeInput = document.createElement(\"select\");\nofficeInput.name = \"office\";\nofficeInput.setAttribute(\"data-qa\", \"position\");\n// Add options for office location\nvar option1 = document.createElement(\"option\");\noption1.text = \"Tokyo\";\nofficeInput.add(option1);\nvar option2 = document.createElement(\"option\");\noption2.text = \"Singapore\";\nofficeInput.add(option2);\nvar option3 = document.createElement(\"option\");\noption3.text = \"London\";\nofficeInput.add(option3);\nvar option4 = document.createElement(\"option\");\noption4.text = \"New York\";\nofficeInput.add(option4);\nvar option5 = document.createElement(\"option\");\noption5.text = \"Edinburgh\";\nofficeInput.add(option5);\nvar option6 = document.createElement(\"option\");\noption6.text = \"San Francisco\";\nofficeInput.add(option6);\n// AGE\nvar labelAge = document.createElement(\"label\");\nlabelAge.textContent = \"Age: \";\nvar ageInput = document.createElement(\"input\");\nageInput.type = \"number\";\nageInput.name = \"age\";\nageInput.setAttribute(\"data-qa\", \"age\");\n// SALARY\nvar labelSalary = document.createElement(\"label\");\nlabelSalary.textContent = \"Salary: \";\nvar salaryInput = document.createElement(\"input\");\nsalaryInput.type = \"number\";\nsalaryInput.name = \"salary\";\nsalaryInput.setAttribute(\"data-qa\", \"salary\");\n// SUBMIT BUTTON\nvar submitButton = document.createElement(\"button\");\nsubmitButton.type = \"button\";\nsubmitButton.name = \"button\";\nsubmitButton.textContent = \"Save to table\";\n// Appending labels and inputs to the form\n// Append input field into lables\nlabelName.appendChild(nameInput);\nlabelPosition.appendChild(positionInput);\nlabelOffice.appendChild(officeInput);\nlabelAge.appendChild(ageInput);\nlabelSalary.appendChild(salaryInput);\n// Append labels to the form\nemployeeForm.appendChild(labelName);\nemployeeForm.appendChild(labelPosition);\nemployeeForm.appendChild(labelOffice);\nemployeeForm.appendChild(labelAge);\nemployeeForm.appendChild(labelSalary);\nemployeeForm.appendChild(submitButton);\n// #endregion\n// Utility variables\n// 0 = ASC\n// 1 = DESC\nvar sortingDirection = 0;\n// Functions\nfunction sortColumn(list, index, direction) {\n    // Sort in decreasing order\n    if (direction === 0) // Change direction of sorting.\n    return list.sort(function(a, b) {\n        var valA = a.cells[index].textContent.trim();\n        var valB = b.cells[index].textContent.trim();\n        // Sort by length of 'title'\n        if (index !== 4 && index !== 3) {\n            valA = valA.toLowerCase();\n            valB = valB.toLowerCase();\n            return valA.length - valB.length;\n        }\n        // Othervise sort in numerical order.\n        valA = parseInt(valA.replace(/[^0-9.]/g, \"\"));\n        valB = parseInt(valB.replace(/[^0-9.]/g, \"\"));\n        return valA - valB;\n    });\n    if (direction === 1) return list.sort(function(a, b) {\n        // Extract data.\n        var valA = a.cells[index].textContent.trim();\n        var valB = b.cells[index].textContent.trim();\n        if (index !== 4 && index !== 3) {\n            // Do it to equailly compare A and B.\n            valA.toLowerCase();\n            valB.toLowerCase();\n            return valB.length - valA.length;\n        }\n        valA = parseInt(valA.replace(/[^0-9.]/g, \"\"));\n        valB = parseInt(valB.replace(/[^0-9.]/g, \"\"));\n        return valB - valA;\n    });\n}\nfunction updateTable(sortedArrOfRows) {\n    // DONE\n    var tableBody = tableOfWorkers.querySelector(\"tbody\");\n    tableBody.innerHTML = \"\";\n    sortedArrOfRows.forEach(function(worker) {\n        tableBody.appendChild(worker);\n    });\n}\ntableRows.forEach(function(row) {\n    row.addEventListener(\"click\", function(e) {\n        tableRows.forEach(function(r) {\n            return r.classList.remove(\"active\");\n        });\n        row.classList.add(\"active\");\n    });\n});\nsubmitButton.addEventListener(\"click\", function(e) {\n    var _tableRows;\n    var statusNotification = document.createElement(\"div\");\n    statusNotification.setAttribute(\"data-qa\", \"notification\");\n    statusNotification.textContent = \"Employee added successfully!\";\n    statusNotification.className = \"notification success\";\n    statusNotification.style.display = \"block\";\n    var statusNotificationTitle = document.createElement(\"h3\");\n    statusNotificationTitle.textContent = \"Success!\";\n    statusNotificationTitle.classList.add(\"title\");\n    statusNotification.appendChild(statusNotificationTitle);\n    // Create a new row\n    var newEmployee = document.createElement(\"tr\");\n    var employeeName = newEmployee.insertCell();\n    var employeePosition = newEmployee.insertCell();\n    var employeeOffice = newEmployee.insertCell();\n    var employeeAge = newEmployee.insertCell();\n    var employeeSalary = newEmployee.insertCell();\n    // Populate the new row with input values\n    if (nameInput.value.length < 4) {\n        statusNotification.className = \"notification error\";\n        statusNotification.textContent = \"Employee name should be at least 4 characters!!!\";\n        statusNotificationTitle.textContent = \"Error!\";\n        statusNotification.appendChild(statusNotificationTitle);\n        document.body.appendChild(statusNotification);\n        setTimeout(function() {\n            statusNotification.style.display = \"none\";\n        }, 2000);\n        return;\n    } else employeeName.textContent = nameInput.value;\n    employeePosition.textContent = positionInput.value;\n    employeeOffice.textContent = officeInput.value;\n    if (Number(ageInput.value) < 18) {\n        statusNotification.className = \"notification error\";\n        statusNotification.textContent = \"Employee age is below 18!\";\n        statusNotificationTitle.textContent = \"Error!\";\n        statusNotification.appendChild(statusNotificationTitle);\n        document.body.appendChild(statusNotification);\n        setTimeout(function() {\n            statusNotification.style.display = \"none\";\n        }, 2000);\n        return;\n    } else employeeAge.textContent = Number(ageInput.value);\n    employeeSalary.textContent = \"$\" + Number(salaryInput.value).toLocaleString();\n    // Append the new row to the table body\n    var tableBody = tableOfWorkers.querySelector(\"tbody\");\n    tableBody.appendChild(newEmployee);\n    statusNotification.className = \"notification success\";\n    document.body.appendChild(statusNotification);\n    // Remove notification after 2 seconds\n    setTimeout(function() {\n        statusNotification.style.display = \"none\";\n    }, 2000);\n    // Recalculate `tableRows` to include the new row\n    var updatedRows = Array.from(tableOfWorkers.querySelectorAll(\"tbody > tr\"));\n    tableRows.length = 0; // Clear the old array\n    (_tableRows = tableRows).push.apply(_tableRows, _to_consumable_array(updatedRows)); // Update with new rows\n    // Add click event for the new row to allow selection\n    newEmployee.addEventListener(\"click\", function() {\n        tableRows.forEach(function(row) {\n            return row.classList.remove(\"active\");\n        });\n        newEmployee.classList.add(\"active\");\n    });\n    // Optionally, clear the form inputs after saving\n    nameInput.value = \"\";\n    positionInput.value = \"\";\n    officeInput.value = \"Tokyo\"; // Reset to default option\n    ageInput.value = \"\";\n    salaryInput.value = \"\";\n});\ntableHeader.addEventListener(\"click\", function(e) {\n    var columnIndex = e.target.cellIndex;\n    // Table rows is an array made of <tr> rows of the table.\n    // columnIndex is an index of the column that should be sorted.\n    // Sorted rows is essentially just an array of new sorted rows ???\n    var sortedRows = sortColumn(tableRows, columnIndex, sortingDirection);\n    updateTable(sortedRows);\n    // update direction ON CLCIK\n    if (sortingDirection === 0) sortingDirection = 1;\n    else sortingDirection = 0;\n});\n\n//# sourceMappingURL=index.55e65ed2.js.map\n","'use strict';\n\n// JS+DOM, table variables\nconst tableOfWorkers = document.querySelector('table');\nconst tableHeader = document.querySelector('table');\nconst tableRows = Array.from(tableOfWorkers.querySelectorAll('tbody > tr'));\n\n// Add form\nconst employeeForm = document.createElement('form');\n\nemployeeForm.classList.add('new-employee-form');\ndocument.body.appendChild(employeeForm);\n\n// Form labels and input\n// #region form_data\n// Add labels\n// NAME\nconst labelName = document.createElement('label');\n\nlabelName.textContent = 'Name: ';\n\nconst nameInput = document.createElement('input');\n\nnameInput.type = 'text';\nnameInput.name = 'name';\nnameInput.setAttribute('data-qa', 'name');\n\n// POSITION\nconst labelPosition = document.createElement('label');\n\nlabelPosition.textContent = 'Position: ';\n\nconst positionInput = document.createElement('input');\n\npositionInput.type = 'text';\npositionInput.name = 'position';\npositionInput.setAttribute('data-qa', 'position');\n\n// OFFICE\nconst labelOffice = document.createElement('label');\n\nlabelOffice.textContent = 'Office: ';\n\nconst officeInput = document.createElement('select');\n\nofficeInput.name = 'office';\nofficeInput.setAttribute('data-qa', 'position');\n\n// Add options for office location\nconst option1 = document.createElement('option');\n\noption1.text = 'Tokyo';\nofficeInput.add(option1);\n\nconst option2 = document.createElement('option');\n\noption2.text = 'Singapore';\nofficeInput.add(option2);\n\nconst option3 = document.createElement('option');\n\noption3.text = 'London';\nofficeInput.add(option3);\n\nconst option4 = document.createElement('option');\n\noption4.text = 'New York';\nofficeInput.add(option4);\n\nconst option5 = document.createElement('option');\n\noption5.text = 'Edinburgh';\nofficeInput.add(option5);\n\nconst option6 = document.createElement('option');\n\noption6.text = 'San Francisco';\nofficeInput.add(option6);\n\n// AGE\nconst labelAge = document.createElement('label');\n\nlabelAge.textContent = 'Age: ';\n\nconst ageInput = document.createElement('input');\n\nageInput.type = 'number';\nageInput.name = 'age';\nageInput.setAttribute('data-qa', 'age');\n\n// SALARY\nconst labelSalary = document.createElement('label');\n\nlabelSalary.textContent = 'Salary: ';\n\nconst salaryInput = document.createElement('input');\n\nsalaryInput.type = 'number';\nsalaryInput.name = 'salary';\nsalaryInput.setAttribute('data-qa', 'salary');\n\n// SUBMIT BUTTON\nconst submitButton = document.createElement('button');\n\nsubmitButton.type = 'button';\nsubmitButton.name = 'button';\nsubmitButton.textContent = 'Save to table';\n\n// Appending labels and inputs to the form\n\n// Append input field into lables\nlabelName.appendChild(nameInput);\nlabelPosition.appendChild(positionInput);\nlabelOffice.appendChild(officeInput);\nlabelAge.appendChild(ageInput);\nlabelSalary.appendChild(salaryInput);\n\n// Append labels to the form\nemployeeForm.appendChild(labelName);\nemployeeForm.appendChild(labelPosition);\nemployeeForm.appendChild(labelOffice);\nemployeeForm.appendChild(labelAge);\nemployeeForm.appendChild(labelSalary);\nemployeeForm.appendChild(submitButton);\n// #endregion\n\n// Utility variables\n// 0 = ASC\n// 1 = DESC\nlet sortingDirection = 0;\n\n// Functions\nfunction sortColumn(list, index, direction) {\n  // Sort in decreasing order\n  if (direction === 0) {\n    // Change direction of sorting.\n    return list.sort((a, b) => {\n      let valA = a.cells[index].textContent.trim();\n      let valB = b.cells[index].textContent.trim();\n\n      // Sort by length of 'title'\n      if (index !== 4 && index !== 3) {\n        valA = valA.toLowerCase();\n        valB = valB.toLowerCase();\n\n        return valA.length - valB.length;\n      }\n\n      // Othervise sort in numerical order.\n      valA = parseInt(valA.replace(/[^0-9.]/g, ''));\n      valB = parseInt(valB.replace(/[^0-9.]/g, ''));\n\n      return valA - valB;\n    });\n  }\n\n  if (direction === 1) {\n    return list.sort((a, b) => {\n      // Extract data.\n      let valA = a.cells[index].textContent.trim();\n      let valB = b.cells[index].textContent.trim();\n\n      if (index !== 4 && index !== 3) {\n        // Do it to equailly compare A and B.\n        valA.toLowerCase();\n        valB.toLowerCase();\n\n        return valB.length - valA.length;\n      }\n\n      valA = parseInt(valA.replace(/[^0-9.]/g, ''));\n      valB = parseInt(valB.replace(/[^0-9.]/g, ''));\n\n      return valB - valA;\n    });\n  }\n}\n\nfunction updateTable(sortedArrOfRows) {\n  // DONE\n  const tableBody = tableOfWorkers.querySelector('tbody');\n\n  tableBody.innerHTML = '';\n\n  sortedArrOfRows.forEach((worker) => {\n    tableBody.appendChild(worker);\n  });\n}\n\ntableRows.forEach((row) => {\n  row.addEventListener('click', (e) => {\n    tableRows.forEach((r) => r.classList.remove('active'));\n    row.classList.add('active');\n  });\n});\n\nsubmitButton.addEventListener('click', (e) => {\n  const statusNotification = document.createElement('div');\n\n  statusNotification.setAttribute('data-qa', 'notification');\n  statusNotification.textContent = 'Employee added successfully!';\n  statusNotification.className = 'notification success';\n  statusNotification.style.display = 'block';\n\n  const statusNotificationTitle = document.createElement('h3');\n\n  statusNotificationTitle.textContent = 'Success!';\n  statusNotificationTitle.classList.add('title');\n  statusNotification.appendChild(statusNotificationTitle);\n\n  // Create a new row\n  const newEmployee = document.createElement('tr');\n  const employeeName = newEmployee.insertCell();\n  const employeePosition = newEmployee.insertCell();\n  const employeeOffice = newEmployee.insertCell();\n  const employeeAge = newEmployee.insertCell();\n  const employeeSalary = newEmployee.insertCell();\n\n  // Populate the new row with input values\n  if (nameInput.value.length < 4) {\n    statusNotification.className = 'notification error';\n\n    statusNotification.textContent =\n      'Employee name should be at least 4 characters!!!';\n    statusNotificationTitle.textContent = 'Error!';\n    statusNotification.appendChild(statusNotificationTitle);\n    document.body.appendChild(statusNotification);\n\n    setTimeout(() => {\n      statusNotification.style.display = 'none';\n    }, 2000);\n\n    return;\n  } else {\n    employeeName.textContent = nameInput.value;\n  }\n  employeePosition.textContent = positionInput.value;\n  employeeOffice.textContent = officeInput.value;\n\n  if (Number(ageInput.value) < 18) {\n    statusNotification.className = 'notification error';\n    statusNotification.textContent = 'Employee age is below 18!';\n    statusNotificationTitle.textContent = 'Error!';\n    statusNotification.appendChild(statusNotificationTitle);\n    document.body.appendChild(statusNotification);\n\n    setTimeout(() => {\n      statusNotification.style.display = 'none';\n    }, 2000);\n\n    return;\n  } else {\n    employeeAge.textContent = Number(ageInput.value);\n  }\n  employeeSalary.textContent = '$' + Number(salaryInput.value).toLocaleString();\n\n  // Append the new row to the table body\n  const tableBody = tableOfWorkers.querySelector('tbody');\n\n  tableBody.appendChild(newEmployee);\n  statusNotification.className = 'notification success';\n  document.body.appendChild(statusNotification);\n\n  // Remove notification after 2 seconds\n  setTimeout(() => {\n    statusNotification.style.display = 'none';\n  }, 2000);\n\n  // Recalculate `tableRows` to include the new row\n  const updatedRows = Array.from(tableOfWorkers.querySelectorAll('tbody > tr'));\n\n  tableRows.length = 0; // Clear the old array\n  tableRows.push(...updatedRows); // Update with new rows\n\n  // Add click event for the new row to allow selection\n  newEmployee.addEventListener('click', () => {\n    tableRows.forEach((row) => row.classList.remove('active'));\n    newEmployee.classList.add('active');\n  });\n\n  // Optionally, clear the form inputs after saving\n  nameInput.value = '';\n  positionInput.value = '';\n  officeInput.value = 'Tokyo'; // Reset to default option\n  ageInput.value = '';\n  salaryInput.value = '';\n});\n\ntableHeader.addEventListener('click', (e) => {\n  const columnIndex = e.target.cellIndex;\n\n  // Table rows is an array made of <tr> rows of the table.\n  // columnIndex is an index of the column that should be sorted.\n  // Sorted rows is essentially just an array of new sorted rows ???\n  const sortedRows = sortColumn(tableRows, columnIndex, sortingDirection);\n\n  updateTable(sortedRows);\n\n  // update direction ON CLCIK\n  if (sortingDirection === 0) {\n    sortingDirection = 1;\n  } else {\n    sortingDirection = 0;\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","tableOfWorkers","document","querySelector","tableHeader","tableRows","from","querySelectorAll","employeeForm","createElement","classList","add","body","appendChild","labelName","textContent","nameInput","type","name","setAttribute","labelPosition","positionInput","labelOffice","officeInput","option1","text","option2","option3","option4","option5","option6","labelAge","ageInput","labelSalary","salaryInput","submitButton","sortingDirection","forEach","row","addEventListener","e","r","remove","statusNotification","className","style","display","statusNotificationTitle","newEmployee","employeeName","insertCell","employeePosition","employeeOffice","employeeAge","employeeSalary","value","setTimeout","Number","toLocaleString","tableBody","updatedRows","push","apply","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","test","_non_iterable_spread","TypeError","direction","sortedArrOfRows","columnIndex","target","cellIndex","list","sort","a","b","valA","cells","trim","valB","index","toLowerCase","parseInt","replace","innerHTML","worker"],"version":3,"file":"index.55e65ed2.js.map"}